name: CI

on:
  push:
    branches:
      - main
    tags-ignore:
      - release

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia
      - uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: 5.2
      - uses: leafo/gh-actions-luarocks@v4.0.0
      - run: |
          luarocks install luafilesystem
          luarocks install argparse
      - uses: actions/checkout@v3
        with:
          repository: LiliaFramework/GluaCheck
          path: luacheck
      - run: |
          cd luacheck
          luarocks make
      - run: |
          cd lilia
          luacheck . --no-global --no-max-line-length --no-self --no-max-code-line-length --no-max-string-line-length --no-max-comment-line-length --no-max-cyclomatic-complexity
  compute-version:
    needs: linter
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calc_version.outputs.version }}
      valid_count: ${{ steps.calc_version.outputs.valid_count }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia
          fetch-depth: 0
      - id: calc_version
        run: |
          cd lilia
          VALID_COUNT=$(git log --no-merges --pretty=format:'%ae' | grep -v '^github-actions@github.com$' | wc -l)
          if (( VALID_COUNT < 100 )); then
            MAJOR=0
            MINOR=0
            PATCH=$VALID_COUNT
          elif (( VALID_COUNT < 1000 )); then
            MAJOR=0
            MINOR=$((VALID_COUNT / 100))
            PATCH=$((VALID_COUNT % 100))
          else
            MAJOR=$((VALID_COUNT / 1000))
            MINOR=$(((VALID_COUNT % 1000) / 100))
            PATCH=$((VALID_COUNT % 100))
          fi
          VERSION_FLOAT=$(echo "$MAJOR.$MINOR$PATCH" | sed 's/^0*//' | sed 's/\.$/.0/')
          echo "version=$VERSION_FLOAT" >> "$GITHUB_OUTPUT"
          echo "valid_count=$VALID_COUNT" >> "$GITHUB_OUTPUT"
  release:
    needs: compute-version
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.compute-version.outputs.version }}
      VALID_COUNT: ${{ needs.compute-version.outputs.valid_count }}
      GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia
      - name: Update GM.version in shared.lua
        run: |
          python3 - << 'PY'
          import os, re, io, sys
          version = os.environ["VERSION"]
          path = "lilia/gamemode/shared.lua"
          with io.open(path, encoding="utf-8-sig") as f:
              lines = f.readlines()
          name_pat = re.compile(r"\s*GM\.Name\s*=")
          out = []
          inserted = False
          for line in lines:
              if name_pat.match(line) and not inserted:
                  out.append(line)
                  out.append(f'GM.version = {version}\n')
                  inserted = True
              elif re.match(r"\s*GM\.version\s*=", line):
                  continue
              else:
                  out.append(line)
          if not inserted:
              sys.exit("GM.Name not found")
          with io.open(path, "w", encoding="utf-8") as f:
              f.writelines(out)
          PY
      - name: Commit version bump in shared.lua
        run: |
          cd lilia
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git add gamemode/shared.lua
          git diff-index --quiet HEAD || git commit -m "Successfully compiled release for version $VERSION"
          git push origin HEAD:main
      - name: Package and zip
        run: |
          cd lilia
          zip -r ../lilia.zip modules gamemode lilia.txt logo.png icon24.png
      - name: Remove previous releases and tags
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[].id')
          for id in $releases; do
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/$id"
          done
          tags=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/git/refs/tags" | jq -r '.[].ref' | sed 's#refs/tags/##')
          for tag in $tags; do
            if [ "$tag" != "$VERSION" ]; then
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag"
            fi
          done
      - id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release
          release_name: Lilia ${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}
      - uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: lilia.zip
          asset_name: lilia.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}
  deploy-pages:
    needs:
      - compute-version
      - release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.compute-version.outputs.version }}
      VALID_COUNT: ${{ needs.compute-version.outputs.valid_count }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia
          persist-credentials: true
      - uses: actions/checkout@v3
        with:
          repository: LiliaFramework/LiliaFramework.github.io
          path: site
          token: ${{ secrets.LiliaGitSecret }}
      - name: Sync docs to site
        run: |
          rsync -a --delete --exclude '.git' lilia/documentation/ site/
      - name: Fetch modules.json
        run: |
          curl -L -o site/modules.json https://raw.githubusercontent.com/LiliaFramework/Modules/refs/heads/gh-pages/modules.json
      - name: Generate version.json
        run: |
          cat > site/version.json <<EOF
          {
            "version": "${VERSION}"
          }
          EOF
      - name: Publish site content
        run: |
          cd site
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "ci: sync docs and update version.json to ${VERSION}"
            git push origin HEAD:main
          fi
  update-workshop:
    needs:
      - compute-version
      - deploy-pages
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.compute-version.outputs.version }}
      VALID_COUNT: ${{ needs.compute-version.outputs.valid_count }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia
      - name: steam-workshop-update
        uses: hmlendea/steam-workshop-update@v1.2.0
        with:
          appid: 4000
          itemid: 2959728255
          path: lilia
        env:
          STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
          STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
          STEAM_2FASEED: ${{ secrets.STEAM_2FASEED }}