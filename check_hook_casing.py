#!/usr/bin/env python3
"""
Script to check for incorrect casing in hook function calls.
"""

import os
from pathlib import Path

# Define the directories to search
SEARCH_DIRS = [
    r"E:\GMOD\Server\garrysmod\gamemodes\Lilia",
    r"E:\GMOD\Server\garrysmod\gamemodes\metrorp\modules\done",
    r"E:\GMOD\Server\garrysmod\gamemodes\metrorp\gitmodules"
]

# Define the correct hook function names and their potential incorrect casing patterns
HOOK_FUNCTIONS = [
    "AddAdminStickCategory",
    "AddAdminStickSubCategory",
    "AddBarField",
    "AddSection",
    "AddTextField",
    "AddToAdminStickHUD",
    "AddWarning",
    "AdjustCreationData",
    "AdjustPACPartData",
    "AdjustStaminaOffset",
    "AttachPart",
    "BagInventoryReady",
    "BagInventoryRemoved",
    "CalcStaminaChange",
    "CanCharBeTransfered",
    "CanDeleteChar",
    "CanDisplayCharInfo",
    "CanInviteToClass",
    "CanInviteToFaction",
    "CanItemBeTransfered",
    "CanOpenBagPanel",
    "CanOutfitChangeModel",
    "CanPerformVendorEdit",
    "CanPersistEntity",
    "CanPickupMoney",
    "CanPlayerAccessDoor",
    "CanPlayerAccessVendor",
    "CanPlayerChooseWeapon",
    "CanPlayerCreateChar",
    "CanPlayerDropItem",
    "CanPlayerEarnSalary",
    "CanPlayerEquipItem",
    "CanPlayerHoldObject",
    "CanPlayerInteractItem",
    "CanPlayerJoinClass",
    "CanPlayerKnock",
    "CanPlayerLock",
    "CanPlayerModifyConfig",
    "CanPlayerOpenScoreboard",
    "CanPlayerRotateItem",
    "CanPlayerSeeLogCategory",
    "CanPlayerSpawnStorage",
    "CanPlayerSwitchChar",
    "CanPlayerTakeItem",
    "CanPlayerThrowPunch",
    "CanPlayerTradeWithVendor",
    "CanPlayerUnequipItem",
    "CanPlayerUnlock",
    "CanPlayerUseChar",
    "CanPlayerUseCommand",
    "CanPlayerUseDoor",
    "CanPlayerViewInventory",
    "CanRunItemAction",
    "CanSaveData",
    "CharCleanUp",
    "CharDeleted",
    "CharForceRecognized",
    "CharHasFlags",
    "CharListColumns",
    "CharListEntry",
    "CharListExtraDetails",
    "CharListLoaded",
    "CharListUpdated",
    "CharLoaded",
    "CharMenuClosed",
    "CharMenuOpened",
    "CharPostSave",
    "CharPreSave",
    "CharRestored",
    "ChatAddText",
    "ChatParsed",
    "ChatboxPanelCreated",
    "ChatboxTextAdded",
    "CheckFactionLimitReached",
    "ChooseCharacter",
    "ClassOnLoadout",
    "ClassPostLoadout",
    "CommandAdded",
    "CommandRan",
    "ConfigChanged",
    "ConfigureCharacterCreationSteps",
    "CreateCharacter",
    "CreateChat",
    "CreateDefaultInventory",
    "CreateInformationButtons",
    "CreateInventoryPanel",
    "CreateMenuButtons",
    "CreateSalaryTimers",
    "DatabaseConnected",
    "DeleteCharacter",
    "DermaSkinChanged",
    "DiscordRelaySend",
    "DiscordRelayUnavailable",
    "DiscordRelayed",
    "DoModuleIncludes",
    "DoorEnabledToggled",
    "DoorHiddenToggled",
    "DoorLockToggled",
    "DoorOwnableToggled",
    "DoorPriceSet",
    "DoorTitleSet",
    "DrawCharInfo",
    "DrawEntityInfo",
    "DrawLiliaModelView",
    "DrawPlayerRagdoll",
    "ExitStorage",
    "F1MenuClosed",
    "F1MenuOpened",
    "F1OnAddBarField",
    "F1OnAddSection",
    "F1OnAddTextField",
    "FactionOnLoadout",
    "FactionPostLoadout",
    "FetchSpawns",
    "FilterCharModels",
    "ForceRecognizeRange",
    "GetAdjustedPartData",
    "GetAllCaseClaims",
    "GetAttributeMax",
    "GetAttributeStartingMax",
    "GetCharMaxStamina",
    "GetDamageScale",
    "GetDefaultCharDesc",
    "GetDefaultCharName",
    "GetDefaultInventorySize",
    "GetDefaultInventoryType",
    "GetDisplayedDescription",
    "GetDisplayedName",
    "GetDoorInfo",
    "GetEntitySaveData",
    "GetHandsAttackSpeed",
    "GetInjuredText",
    "GetItemDropModel",
    "GetItemStackKey",
    "GetItemStacks",
    "GetMainMenuPosition",
    "GetMaxPlayerChar",
    "GetMaxStartingAttributePoints",
    "GetModelGender",
    "GetMoneyModel",
    "GetOOCDelay",
    "GetPlayTime",
    "GetPlayerDeathSound",
    "GetPlayerPainSound",
    "GetPlayerPunchDamage",
    "GetPlayerPunchRagdollTime",
    "GetPriceOverride",
    "GetRagdollTime",
    "GetSalaryAmount",
    "GetTicketsByRequester",
    "GetVendorSaleScale",
    "GetWarnings",
    "GetWarningsByIssuer",
    "GetWeaponName",
    "HandleItemTransferRequest",
    "InitializeStorage",
    "InitializedConfig",
    "InitializedItems",
    "InitializedKeybinds",
    "InitializedModules",
    "InitializedOptions",
    "InitializedSchema",
    "InteractionMenuClosed",
    "InteractionMenuOpened",
    "InterceptClickItemIcon",
    "InventoryClosed",
    "InventoryDataChanged",
    "InventoryDeleted",
    "InventoryInitialized",
    "InventoryItemAdded",
    "InventoryItemDataChanged",
    "InventoryItemIconCreated",
    "InventoryItemRemoved",
    "InventoryOpened",
    "InventoryPanelCreated",
    "IsCharFakeRecognized",
    "IsCharRecognized",
    "IsRecognizedChatType",
    "IsSuitableForTrunk",
    "IsValid",
    "ItemCombine",
    "ItemDataChanged",
    "ItemDefaultFunctions",
    "ItemDeleted",
    "ItemDraggedOutOfInventory",
    "ItemFunctionCalled",
    "ItemInitialized",
    "ItemPaintOver",
    "ItemQuantityChanged",
    "ItemShowEntityMenu",
    "ItemTransfered",
    "KeyLock",
    "KeyUnlock",
    "KickedFromChar",
    "LiliaLoaded",
    "LiliaTablesLoaded",
    "LoadCharInformation",
    "LoadData",
    "LoadMainMenuInformation",
    "ModifyCharacterModel",
    "ModifyScoreboardModel",
    "NetVarChanged",
    "OnAdminSystemLoaded",
    "OnCharAttribBoosted",
    "OnCharAttribUpdated",
    "OnCharCreated",
    "OnCharDelete",
    "OnCharDisconnect",
    "OnCharFallover",
    "OnCharFlagsGiven",
    "OnCharFlagsTaken",
    "OnCharGetup",
    "OnCharKick",
    "OnCharNetVarChanged",
    "OnCharPermakilled",
    "OnCharRecognized",
    "OnCharTradeVendor",
    "OnCharVarChanged",
    "OnChatReceived",
    "OnCheaterCaught",
    "OnCheaterStatusChanged",
    "OnConfigUpdated",
    "OnCreateItemInteractionMenu",
    "OnCreatePlayerRagdoll",
    "OnCreateStoragePanel",
    "OnDataSet",
    "OnDatabaseLoaded",
    "OnDeathSoundPlayed",
    "OnEntityLoaded",
    "OnEntityPersistUpdated",
    "OnEntityPersisted",
    "OnFontsRefreshed",
    "OnItemAdded",
    "OnItemCreated",
    "OnItemRegistered",
    "OnItemSpawned",
    "OnLoadTables",
    "OnOOCMessageSent",
    "OnOpenVendorMenu",
    "OnPAC3PartTransfered",
    "OnPainSoundPlayed",
    "OnPickupMoney",
    "OnPlayerDropWeapon",
    "OnPlayerEnterSequence",
    "OnPlayerInteractItem",
    "OnPlayerJoinClass",
    "OnPlayerLeaveSequence",
    "OnPlayerLostStackItem",
    "OnPlayerObserve",
    "OnPlayerPurchaseDoor",
    "OnPlayerSwitchClass",
    "OnPrivilegeRegistered",
    "OnPrivilegeUnregistered",
    "OnRequestItemTransfer",
    "OnSalaryAdjust",
    "OnSalaryGiven",
    "OnSavedItemLoaded",
    "OnServerLog",
    "OnThemeChanged",
    "OnTicketClaimed",
    "OnTicketClosed",
    "OnTicketCreated",
    "OnTransferred",
    "OnUsergroupCreated",
    "OnUsergroupPermissionsChanged",
    "OnUsergroupRemoved",
    "OnUsergroupRenamed",
    "OnVendorEdited",
    "OnlineStaffDataReceived",
    "OpenAdminStickUI",
    "OptionChanged",
    "OptionReceived",
    "OverrideFactionDesc",
    "OverrideFactionModels",
    "OverrideFactionName",
    "OverrideSpawnTime",
    "PaintItem",
    "PlayerAccessVendor",
    "PlayerCheatDetected",
    "PlayerDisconnect",
    "PlayerGagged",
    "PlayerLiliaDataLoaded",
    "PlayerLoadedChar",
    "PlayerMessageSend",
    "PlayerModelChanged",
    "PlayerMuted",
    "PlayerShouldAct",
    "PlayerShouldPermaKill",
    "PlayerSpawnPointSelected",
    "PlayerStaminaGained",
    "PlayerStaminaLost",
    "PlayerThrowPunch",
    "PlayerUngagged",
    "PlayerUnmuted",
    "PlayerUseDoor",
    "PopulateAdminStick",
    "PopulateAdminTabs",
    "PopulateConfigurationButtons",
    "PopulateInventoryItems",
    "PostDoorDataLoad",
    "PostDrawInventory",
    "PostLoadData",
    "PostLoadFonts",
    "PostPlayerInitialSpawn",
    "PostPlayerLoadedChar",
    "PostPlayerLoadout",
    "PostPlayerSay",
    "PostScaleDamage",
    "PreCharDelete",
    "PreDoorDataSave",
    "PreDrawPhysgunBeam",
    "PreLiliaLoaded",
    "PrePlayerInteractItem",
    "PrePlayerLoadedChar",
    "PreSalaryGive",
    "PreScaleDamage",
    "RefreshFonts",
    "RegisterPreparedStatements",
    "RemovePart",
    "RemoveWarning",
    "ResetCharacterPanel",
    "RunAdminSystemCommand",
    "SaveData",
    "ScoreboardClosed",
    "ScoreboardOpened",
    "ScoreboardRowCreated",
    "ScoreboardRowRemoved",
    "SendPopup",
    "SetupBagInventoryAccessRules",
    "SetupBotPlayer",
    "SetupDatabase",
    "SetupPACDataFromItems",
    "SetupPlayerModel",
    "SetupQuickMenu",
    "ShouldAllowScoreboardOverride",
    "ShouldBarDraw",
    "ShouldDataBeSaved",
    "ShouldDeleteSavedItems",
    "ShouldDisableThirdperson",
    "ShouldDrawEntityInfo",
    "ShouldDrawPlayerInfo",
    "ShouldDrawWepSelect",
    "ShouldHideBars",
    "ShouldMenuButtonShow",
    "ShouldPlayDeathSound",
    "ShouldPlayPainSound",
    "ShouldRespawnScreenAppear",
    "ShouldShowPlayerOnScoreboard",
    "ShouldSpawnClientRagdoll",
    "ShowPlayerOptions",
    "StorageCanTransferItem",
    "StorageEntityRemoved",
    "StorageInventorySet",
    "StorageItemRemoved",
    "StorageOpen",
    "StorageRestored",
    "StorageUnlockPrompt",
    "StoreSpawns",
    "SyncCharList",
    "ThirdPersonToggled",
    "TicketFrame",
    "TicketSystemClaim",
    "TicketSystemClose",
    "TicketSystemCreated",
    "ToggleLock",
    "TooltipInitialize",
    "TooltipLayout",
    "TooltipPaint",
    "TransferItem",
    "TryViewModel",
    "UpdateEntityPersistence",
    "VendorClassUpdated",
    "VendorEdited",
    "VendorExited",
    "VendorFactionUpdated",
    "VendorItemMaxStockUpdated",
    "VendorItemModeUpdated",
    "VendorItemPriceUpdated",
    "VendorItemStockUpdated",
    "VendorOpened",
    "VendorSynchronized",
    "VendorTradeEvent",
    "VoiceToggled",
    "WarningIssued",
    "WarningRemoved",
    "WeaponCycleSound",
    "WeaponSelectSound",
    "WebImageDownloaded",
    "WebSoundDownloaded",
    "getData",
    "setData"
]

def search_files_simple(pattern, search_dir):
    """Simple file search without external tools."""
    results = []

    for root, dirs, files in os.walk(search_dir):
        for file in files:
            if file.endswith('.lua'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        for line_num, line in enumerate(lines, 1):
                            if pattern in line:
                                results.append(f"{file_path}:{line_num}:{line.strip()}")
                except Exception as e:
                    pass  # Skip files that can't be read

    return results

def check_hook_function_casing():
    """Check for incorrect casing in hook function calls."""
    issues_found = []

    for hook_name in HOOK_FUNCTIONS:
        print(f"Checking {hook_name}...")

        # Check for incorrect casing patterns
        incorrect_patterns = [
            hook_name.upper(),
            hook_name.lower()
        ]

        for incorrect_pattern in incorrect_patterns:
            if incorrect_pattern != hook_name:  # Don't check for the correct pattern
                for search_dir in SEARCH_DIRS:
                    incorrect_usage = search_files_simple(incorrect_pattern, search_dir)
                    if incorrect_usage:
                        issues_found.append({
                            'hook': hook_name,
                            'incorrect_pattern': incorrect_pattern,
                            'correct_pattern': hook_name,
                            'found_in': '\n'.join(incorrect_usage[:3]) + ("..." if len(incorrect_usage) > 3 else "")
                        })

    return issues_found

def main():
    print("Checking for hook function casing issues...")
    print("=" * 60)

    issues = check_hook_function_casing()

    if issues:
        print(f"\nFound {len(issues)} casing issues:")
        print("=" * 60)
        for issue in issues:
            print(f"\nHook: {issue['hook']}")
            print(f"Incorrect: {issue['incorrect_pattern']}")
            print(f"Correct: {issue['correct_pattern']}")
            print("Found in:")
            print(issue['found_in'])
    else:
        print("\nNo casing issues found!")

    print("\n" + "=" * 60)
    print("Check complete!")

if __name__ == "__main__":
    main()
